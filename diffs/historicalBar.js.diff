--- src/models/bar/historical/historicalBar.js	2014-03-11 14:55:45.000000000 -0400
+++ ../nvd3/src/models/historicalBar.js	2013-12-06 15:56:22.000000000 -0500
@@ -5,10 +5,9 @@
   // Public Variables with Default Settings
   //------------------------------------------------------------
 
-  var canvas= new Canvas({
-        margin: {top: 0, right: 0, bottom: 0, left: 0}
-        , chartClass: 'historicalBar'
-      })
+  var margin = {top: 0, right: 0, bottom: 0, left: 0}
+    , width = 960
+    , height = 500
     , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
     , x = d3.scale.linear()
     , y = d3.scale.linear()
@@ -29,26 +28,26 @@
 
   //============================================================
 
+
   function chart(selection) {
     selection.each(function(data) {
+      var availableWidth = width - margin.left - margin.right,
+          availableHeight = height - margin.top - margin.bottom,
+          container = d3.select(this);
 
-      canvas.setRoot(this);
-
-      var availableWidth = canvas.available.width,
-          availableHeight = canvas.available.height;
 
       //------------------------------------------------------------
       // Setup Scales
 
-      x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));
+      x   .domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ))
 
       if (padData)
         x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
       else
         x.range(xRange || [0, availableWidth]);
 
-      y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))
-        .range(yRange || [availableHeight, 0]);
+      y   .domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))
+          .range(yRange || [availableHeight, 0]);
 
       // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
 
@@ -68,111 +67,125 @@
       //------------------------------------------------------------
       // Setup containers and skeleton of chart
 
-      canvas.wrapChart(data[0].values);
-      canvas.gEnter.append('g').attr('class', 'nv-bars');
-      canvas.wrap.attr('transform', 'translate(' + canvas.margin.left + ',' + canvas.margin.top + ')');
+      var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);
+      var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);
+      var defsEnter = wrapEnter.append('defs');
+      var gEnter = wrapEnter.append('g');
+      var g = wrap.select('g');
+
+      gEnter.append('g').attr('class', 'nv-bars');
+
+      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
 
       //------------------------------------------------------------
 
-      canvas.svg.on('click', function(d,i) {
-        dispatch.chartClick({
-            data: d,
-            index: i,
-            pos: d3.event,
-            id: id
-        });
-      });
 
-      canvas.defsEnter.append('clipPath')
-        .attr('id', 'nv-chart-clip-path-' + id)
+      container
+          .on('click', function(d,i) {
+            dispatch.chartClick({
+                data: d,
+                index: i,
+                pos: d3.event,
+                id: id
+            });
+          });
+
+
+      defsEnter.append('clipPath')
+          .attr('id', 'nv-chart-clip-path-' + id)
         .append('rect');
 
-      canvas.wrap.select('#nv-chart-clip-path-' + id + ' rect')
-        .attr('width', availableWidth)
-        .attr('height', availableHeight);
-
-      canvas.g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
-
-      var bars = canvas.wrap.select('.nv-bars')
-        .selectAll('.nv-bar')
-        .data(function(d) { return d }, function(d,i) {return getX(d,i)});
+      wrap.select('#nv-chart-clip-path-' + id + ' rect')
+          .attr('width', availableWidth)
+          .attr('height', availableHeight);
+
+      g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
+
+
+
+      var bars = wrap.select('.nv-bars').selectAll('.nv-bar')
+          .data(function(d) { return d }, function(d,i) {return getX(d,i)});
 
       bars.exit().remove();
 
+
       var barsEnter = bars.enter().append('rect')
-        //.attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })
-        .attr('x', 0 )
-        .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })
-        .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })
-        .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })
-        .on('mouseover', function(d,i) {
-          if (!interactive) return;
-          d3.select(this).classed('hover', true);
-          dispatch.elementMouseover({
-            point: d,
-            series: data[0],
-            pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted
-            pointIndex: i,
-            seriesIndex: 0,
-            e: d3.event
-          });
-        })
-        .on('mouseout', function(d,i) {
-          if (!interactive) return;
-          d3.select(this).classed('hover', false);
-          dispatch.elementMouseout({
-            point: d,
-            series: data[0],
-            pointIndex: i,
-            seriesIndex: 0,
-            e: d3.event
-          });
-        })
-        .on('click', function(d,i) {
-          if (!interactive) return;
-          dispatch.elementClick({
-            //label: d[label],
-            value: getY(d,i),
-            data: d,
-            index: i,
-            pos: [x(getX(d,i)), y(getY(d,i))],
-            e: d3.event,
-            id: id
+          //.attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })
+          .attr('x', 0 )
+          .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })
+          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })
+          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) 
+          .on('mouseover', function(d,i) {
+            if (!interactive) return;
+            d3.select(this).classed('hover', true);
+            dispatch.elementMouseover({
+                point: d,
+                series: data[0],
+                pos: [x(getX(d,i)), y(getY(d,i))],  // TODO: Figure out why the value appears to be shifted
+                pointIndex: i,
+                seriesIndex: 0,
+                e: d3.event
+            });
+
+          })
+          .on('mouseout', function(d,i) {
+                if (!interactive) return;
+                d3.select(this).classed('hover', false);
+                dispatch.elementMouseout({
+                    point: d,
+                    series: data[0],
+                    pointIndex: i,
+                    seriesIndex: 0,
+                    e: d3.event
+                });
+          })
+          .on('click', function(d,i) {
+                if (!interactive) return;
+                dispatch.elementClick({
+                    //label: d[label],
+                    value: getY(d,i),
+                    data: d,
+                    index: i,
+                    pos: [x(getX(d,i)), y(getY(d,i))],
+                    e: d3.event,
+                    id: id
+                });
+              d3.event.stopPropagation();
+          })
+          .on('dblclick', function(d,i) {
+              if (!interactive) return;
+              dispatch.elementDblClick({
+                  //label: d[label],
+                  value: getY(d,i),
+                  data: d,
+                  index: i,
+                  pos: [x(getX(d,i)), y(getY(d,i))],
+                  e: d3.event,
+                  id: id
+              });
+              d3.event.stopPropagation();
           });
-          d3.event.stopPropagation();
-        })
-        .on('dblclick', function(d,i) {
-          if (!interactive) return;
-          dispatch.elementDblClick({
-            //label: d[label],
-            value: getY(d,i),
-            data: d,
-            index: i,
-            pos: [x(getX(d,i)), y(getY(d,i))],
-            e: d3.event,
-            id: id
-          });
-          d3.event.stopPropagation();
-        });
 
       bars
-        .attr('fill', function(d,i) { return color(d, i); })
-        .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })
-        .transition()
-        .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })
-         //TODO: better width calculations that don't assume always uniform data spacing;w
-        .attr('width', (availableWidth / data[0].values.length) * .9 );
+          .attr('fill', function(d,i) { return color(d, i); })
+          .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })
+          .transition()
+          .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; }) 
+           //TODO: better width calculations that don't assume always uniform data spacing;w
+          .attr('width', (availableWidth / data[0].values.length) * .9 );
+
 
       bars.transition()
-        .attr('y', function(d,i) {
-          var rval = getY(d,i) < 0 ?
-              y(0) :
-              y(0) - y(getY(d,i)) < 1 ?
-                y(0) - 1 :
-                y(getY(d,i));
-          return nv.utils.NaNtoZero(rval);
-        })
-        .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });
+          .attr('y', function(d,i) {
+            var rval = getY(d,i) < 0 ?
+                    y(0) :
+                    y(0) - y(getY(d,i)) < 1 ?
+                      y(0) - 1 :
+                      y(getY(d,i));
+            return nv.utils.NaNtoZero(rval);
+          })
+          .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });
+
     });
 
     return chart;
@@ -180,15 +193,17 @@
 
   //Create methods to allow outside functions to highlight a specific bar.
   chart.highlightPoint = function(pointIndex, isHoverOver) {
-    d3.select(".nv-"+canvas.options.chartClass+"-" + id)
-      .select(".nv-bars .nv-bar-0-" + pointIndex)
-      .classed("hover", isHoverOver);
+      d3.select(".nv-historicalBar-" + id)
+        .select(".nv-bars .nv-bar-0-" + pointIndex)
+              .classed("hover", isHoverOver)
+               ;
   };
 
   chart.clearHighlights = function() {
-    d3.select(".nv-"+canvas.options.chartClass+"-" + id)
-      .select(".nv-bars .nv-bar.hover")
-      .classed("hover", false);
+      d3.select(".nv-historicalBar-" + id)
+        .select(".nv-bars .nv-bar.hover")
+              .classed("hover", false)
+               ;
   };
   //============================================================
   // Expose Public Variables
@@ -211,23 +226,23 @@
   };
 
   chart.margin = function(_) {
-    if (!arguments.length) return canvas.margin;
-    canvas.margin.top    = typeof _.top    != 'undefined' ? _.top    : canvas.margin.top;
-    canvas.margin.right  = typeof _.right  != 'undefined' ? _.right  : canvas.margin.right;
-    canvas.margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : canvas.margin.bottom;
-    canvas.margin.left   = typeof _.left   != 'undefined' ? _.left   : canvas.margin.left;
+    if (!arguments.length) return margin;
+    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;
+    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;
+    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
+    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;
     return chart;
   };
 
   chart.width = function(_) {
-    if (!arguments.length) return canvas.options.size.width;
-    canvas.options.size.width = _;
+    if (!arguments.length) return width;
+    width = _;
     return chart;
   };
 
   chart.height = function(_) {
-    if (!arguments.length) return canvas.options.size.height;
-    canvas.options.size.height = _;
+    if (!arguments.length) return height;
+    height = _;
     return chart;
   };
 
@@ -311,5 +326,6 @@
 
   //============================================================
 
+
   return chart;
-};
\ No newline at end of file
+}
