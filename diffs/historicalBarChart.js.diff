--- src/models/bar/historical/historicalBarChart.js	2014-03-11 14:55:45.000000000 -0400
+++ ../nvd3/src/models/historicalBarChart.js	2014-02-04 17:00:50.000000000 -0500
@@ -1,3 +1,4 @@
+
 nv.models.historicalBarChart = function() {
   "use strict";
   //============================================================
@@ -10,15 +11,17 @@
     , legend = nv.models.legend()
     ;
 
-  var canvas = new Canvas({
-      margin: {top: 30, right: 90, bottom: 50, left: 90}
-    })      
+
+  var margin = {top: 30, right: 90, bottom: 50, left: 90}
     , color = nv.utils.defaultColor()
+    , width = null
+    , height = null
+    , showLegend = false
     , showXAxis = true
     , showYAxis = true
     , rightAlignYAxis = false
     , tooltips = true
-    , tooltip = function(key, x, y) {
+    , tooltip = function(key, x, y, e, graph) {
         return '<h3>' + key + '</h3>' +
                '<p>' +  y + ' at ' + x + '</p>'
       }
@@ -26,6 +29,7 @@
     , y
     , state = {}
     , defaultState = null
+    , noData = 'No Data Available.'
     , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState')
     , transitionDuration = 250
     ;
@@ -63,7 +67,7 @@
         top = e.pos[1] + ( offsetElement.offsetTop || 0),
         x = xAxis.tickFormat()(bars.x()(e.point, e.pointIndex)),
         y = yAxis.tickFormat()(bars.y()(e.point, e.pointIndex)),
-        content = tooltip(e.series.key, x, y);
+        content = tooltip(e.series.key, x, y, e, chart);
 
     nv.tooltip.show([left, top], content, null, null, offsetElement);
   };
@@ -73,16 +77,16 @@
 
   function chart(selection) {
     selection.each(function(data) {
-      var that = this;
+      var container = d3.select(this),
+          that = this;
 
-      canvas.setRoot(this);
-      if (canvas.noData(data))
-        return chart;
+      var availableWidth = (width  || parseInt(container.style('width')) || 960)
+                             - margin.left - margin.right,
+          availableHeight = (height || parseInt(container.style('height')) || 400)
+                             - margin.top - margin.bottom;
 
-      var availableWidth = canvas.available.width,
-          availableHeight = canvas.available.height;
 
-      chart.update = function() { canvas.svg.transition().duration(transitionDuration).call(chart) };
+      chart.update = function() { container.transition().duration(transitionDuration).call(chart) };
       chart.container = this;
 
       //set state.disabled
@@ -100,6 +104,30 @@
       }
 
       //------------------------------------------------------------
+      // Display noData message if there's nothing to show.
+
+      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
+        var noDataText = container.selectAll('.nv-noData').data([noData]);
+
+        noDataText.enter().append('text')
+          .attr('class', 'nvd3 nv-noData')
+          .attr('dy', '-.7em')
+          .style('text-anchor', 'middle');
+
+        noDataText
+          .attr('x', margin.left + availableWidth / 2)
+          .attr('y', margin.top + availableHeight / 2)
+          .text(function(d) { return d });
+
+        return chart;
+      } else {
+        container.selectAll('.nv-noData').remove();
+      }
+
+      //------------------------------------------------------------
+
+
+      //------------------------------------------------------------
       // Setup Scales
 
       x = bars.xScale();
@@ -111,12 +139,14 @@
       //------------------------------------------------------------
       // Setup containers and skeleton of chart
 
-
-      canvas.wrapChart(data);
-      canvas.gEnter.append('g').attr('class', 'nv-x nv-axis');
-      canvas.gEnter.append('g').attr('class', 'nv-y nv-axis');
-      canvas.gEnter.append('g').attr('class', 'nv-barsWrap');
-      canvas.gEnter.append('g').attr('class', 'nv-legendWrap');
+      var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);
+      var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');
+      var g = wrap.select('g');
+
+      gEnter.append('g').attr('class', 'nv-x nv-axis');
+      gEnter.append('g').attr('class', 'nv-y nv-axis');
+      gEnter.append('g').attr('class', 'nv-barsWrap');
+      gEnter.append('g').attr('class', 'nv-legendWrap');
 
       //------------------------------------------------------------
 
@@ -124,31 +154,33 @@
       //------------------------------------------------------------
       // Legend
 
-      if (canvas.showLegend) {
+      if (showLegend) {
         legend.width(availableWidth);
 
         g.select('.nv-legendWrap')
-          .datum(data)
-          .call(legend);
+            .datum(data)
+            .call(legend);
 
-        if ( canvas.margin.top != legend.height()) {
-          canvas.margin.top = legend.height();
-          availableHeight = (height || parseInt(canvas.svg.style('height')) || 400) - canvas.margin.top - canvas.margin.bottom;
+        if ( margin.top != legend.height()) {
+          margin.top = legend.height();
+          availableHeight = (height || parseInt(container.style('height')) || 400)
+                             - margin.top - margin.bottom;
         }
 
-        canvas.wrap.select('.nv-legendWrap')
-          .attr('transform', 'translate(0,' + (-canvas.margin.top) +')')
+        wrap.select('.nv-legendWrap')
+            .attr('transform', 'translate(0,' + (-margin.top) +')')
       }
 
       //------------------------------------------------------------
 
-      canvas.wrap.attr('transform', 'translate(' + canvas.margin.left + ',' + canvas.margin.top + ')');
+      wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
 
       if (rightAlignYAxis) {
         g.select(".nv-y.nv-axis")
-          .attr("transform", "translate(" + availableWidth + ",0)");
+            .attr("transform", "translate(" + availableWidth + ",0)");
       }
 
+
       //------------------------------------------------------------
       // Main Chart Component(s)
 
@@ -159,46 +191,54 @@
           return d.color || color(d, i);
         }).filter(function(d,i) { return !data[i].disabled }));
 
-      var barsWrap = canvas.g.select('.nv-barsWrap')
+
+      var barsWrap = g.select('.nv-barsWrap')
           .datum(data.filter(function(d) { return !d.disabled }))
-          .transition()
-          .call(bars);
+
+      barsWrap.transition().call(bars);
 
       //------------------------------------------------------------
 
+
       //------------------------------------------------------------
       // Setup Axes
 
       if (showXAxis) {
-        xAxis.scale(x)
+        xAxis
+          .scale(x)
           .tickSize(-availableHeight, 0);
-        canvas.g.select('.nv-x.nv-axis')
-          .attr('transform', 'translate(0,' + y.range()[0] + ')')
-          .transition()
-          .call(xAxis);
+
+        g.select('.nv-x.nv-axis')
+            .attr('transform', 'translate(0,' + y.range()[0] + ')');
+        g.select('.nv-x.nv-axis')
+            .transition()
+            .call(xAxis);
       }
 
       if (showYAxis) {
-        yAxis.scale(y)
+        yAxis
+          .scale(y)
           .ticks( availableHeight / 36 )
           .tickSize( -availableWidth, 0);
-        canvas.g.select('.nv-y.nv-axis')
+
+        g.select('.nv-y.nv-axis')
           .transition()
-          .call(yAxis);
+            .call(yAxis);
       }
       //------------------------------------------------------------
 
+
       //============================================================
       // Event Handling/Dispatching (in chart's scope)
       //------------------------------------------------------------
 
-      legend.dispatch.on('legendClick', function(d) {
+      legend.dispatch.on('legendClick', function(d,i) {
         d.disabled = !d.disabled;
 
         if (!data.filter(function(d) { return !d.disabled }).length) {
           data.map(function(d) {
             d.disabled = false;
-            canvas.wrap.selectAll('.nv-series').classed('disabled', false);
+            wrap.selectAll('.nv-series').classed('disabled', false);
             return d;
           });
         }
@@ -225,6 +265,7 @@
         if (tooltips) showTooltip(e, that.parentNode);
       });
 
+
       dispatch.on('changeState', function(e) {
 
         if (typeof e.disabled !== 'undefined') {
@@ -245,12 +286,13 @@
     return chart;
   }
 
+
   //============================================================
   // Event Handling/Dispatching (out of chart's scope)
   //------------------------------------------------------------
 
   bars.dispatch.on('elementMouseover.tooltip', function(e) {
-    e.pos = [e.pos[0] +  canvas.margin.left, e.pos[1] + canvas.margin.top];
+    e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];
     dispatch.tooltipShow(e);
   });
 
@@ -264,6 +306,7 @@
 
   //============================================================
 
+
   //============================================================
   // Expose Public Variables
   //------------------------------------------------------------
@@ -281,23 +324,23 @@
   chart.options = nv.utils.optionsFunc.bind(chart);
 
   chart.margin = function(_) {
-    if (!arguments.length) return canvas.margin;
-    canvas.margin.top    = typeof _.top    != 'undefined' ? _.top    : canvas.margin.top;
-    canvas.margin.right  = typeof _.right  != 'undefined' ? _.right  : canvas.margin.right;
-    canvas.margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : canvas.margin.bottom;
-    canvas.margin.left   = typeof _.left   != 'undefined' ? _.left   : canvas.margin.left;
+    if (!arguments.length) return margin;
+    margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;
+    margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;
+    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
+    margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;
     return chart;
   };
 
   chart.width = function(_) {
-    if (!arguments.length) return canvas.options.size.width;
-    canvas.options.size.width = _;
+    if (!arguments.length) return width;
+    width = _;
     return chart;
   };
 
   chart.height = function(_) {
-    if (!arguments.length) return canvas.options.size.height;
-    canvas.options.size.height = _;
+    if (!arguments.length) return height;
+    height = _;
     return chart;
   };
 
@@ -309,8 +352,8 @@
   };
 
   chart.showLegend = function(_) {
-    if (!arguments.length) return canvas.showLegend;
-    canvas.showLegend = _;
+    if (!arguments.length) return showLegend;
+    showLegend = _;
     return chart;
   };
 
@@ -358,8 +401,8 @@
   };
 
   chart.noData = function(_) {
-    if (!arguments.length) return canvas.noData;
-    canvas.noData = _;
+    if (!arguments.length) return noData;
+    noData = _;
     return chart;
   };
 
@@ -371,5 +414,6 @@
 
   //============================================================
 
+
   return chart;
-};
\ No newline at end of file
+}
